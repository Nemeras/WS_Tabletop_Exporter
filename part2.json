Unless looking to troubleshoot, everything below this point should not need to be changed.\r\nwindowName = \"deckGeneratorWindow\"\r\ndefaultCharacterSleevesURL = \"https://i.imgur.com/fRYj5tS.jpg\"\r\n\r\nfunction onLoad()\r\n\tprint(\"Deck Generator (\"..deckName..\")\")\r\n\tprint(\"Note: Please ensure there are no other Deck Generators for this session. Also, please upload the deck.png first into the cloud and/or imgur.\")\r\n\tprint(\"To generate, type: +generate <url_for_deck> [<url_for_sleeves>]\")\r\n\tprint(\"There is also a UI now which I highly recommend.\")\r\n\tWait.frames(afterLoad, 1)\r\nend\r\n\r\nfunction afterLoad()\r\n\toldGlobalUIXML = UI.getXml()\r\n\tuiCharaSleeves = defaultCharacterSleevesURL\r\n\tUI.setXml(self.UI.getXml())\r\n\tWait.frames(adjustButtons, 1)\r\nend\r\n\r\nfunction adjustButtons()\r\n\tselfGUID = self.getGUID()\r\n\t--print(self.getGUID())\r\n\tmakeRelative(\"closeButton\", \"onClick\")\r\n\tmakeRelative(\"generateButton\", \"onClick\")\r\n\tmakeRelative(\"deckImageText\", \"onValueChanged\")\r\n\tmakeRelative(\"charaSleevesText\", \"onValueChanged\")\r\n\tself.UI.hide(windowName)\r\n\tWait.frames(addVariables, 1)\r\nend\r\n\r\nfunction addVariables()\r\n\tUI.setAttribute(windowName, \"active\", \"true\")\r\n\tUI.setAttribute(\"deckNameText\", \"Text\", deckName)\r\nend\r\n\r\nfunction onDestroy()\r\n\tUI.setXml(oldGlobalUIXML)\r\nend\r\n\r\nfunction makeRelative(button, eventAttribute)\r\n\tWait.Frames(function() UI.setAttribute(button, eventAttribute, selfGUID..\"/\"..self.UI.getAttribute(button, eventAttribute)) end, 1)\r\nend\r\n\r\n-- Function to close the window\r\nfunction close(player, value, id)\r\n\tUI.hide(windowName)\r\nend\r\n\r\nfunction minimize(player, value, id)\r\n\t-- Is the size of the window bigger than its top bar?\r\n\tif(tonumber(UI.getAttribute(windowName, \"Height\")) > tonumber(UI.getAttribute(\"TopBar\", \"Height\"))) then\r\n\t  UI.setAttribute(windowName, \"OffsetXY\", \"0 135\") -- Offset is set to (Height - Height_of_Top_Bar) /2\r\n\t  UI.setAttribute(windowName, \"Height\", tonumber(UI.getAttribute(\"TopBar\", \"Height\")))\r\n\telse\r\n\t  UI.setAttribute(windowName,\"OffsetXY\", \"0 0\")\r\n\t  UI.setAttribute(windowName, \"Height\", 300)\r\n\tend\r\nend\r\n\r\nfunction setDeckImage(player, value, id)\r\n\tuiDeckImage = value\r\nend\r\n\r\nfunction setCharacterSleeves(player, value, id)\r\n\tuiCharaSleeves = value\r\n\tif (uiCharaSleeves == \"\") then \r\n\t\tuiCharaSleeves = defaultCharacterSleevesURL\r\n\tend\r\nend\r\n\r\nfunction generateDeckViaUI(player, value, id)\r\n\tif (uiDeckImage ~= nil) then\r\n\t\tprint(\"stub\"..uiDeckImage..\" - \"..uiCharaSleeves)\r\n\t\tgenerateDeck(uiDeckImage, uiCharaSleeves)\r\n\tend\r\nend\r\n\r\nfunction onChat(message, player)\r\n\tlocal command = \"+generate\"\r\n    print(message)\r\n    print(player.color)\r\n\tlocal subcomm = message:sub(1, #command)\r\n\tif subcomm == command then\r\n\t\tprint(\"Running Generate Deck\")\r\n\t\tlocal splitStr = split(message)\r\n\t\tlocal back = splitStr[3]\r\n\t\tif back == nil then back = defaultCharacterSleevesURL end\r\n\t\tgenerateDeck(splitStr[2], back)\r\n\tend\r\nend\r\n\r\nfunction split(str)\r\n\tlocal output = {}\r\n\tlocal index = 1\r\n\tfor i in string.gmatch(str, \"%S+\") do\r\n\t\toutput[index] = i\r\n\t\tindex = index + 1\r\n\tend\r\n\treturn output\r\nend\r\n\r\n--function onClick(obj, color, alt_click)\r\nfunction generateDeck(faces, back)\r\n\tlocal serials = JSON.decode(serialsJSON)\r\n\tlocal serialInfo = JSON.decode(serialInfoJSON)\r\n\tlocal spawnParameters = {\r\n\t\ttype = \"DeckCustom\",\r\n\t\tname = deckname,\r\n\t\tcallback_function = function(obj) onDeckLoaded(obj, deckname, serials, serialInfo) end\r\n\t}\r\n\tlocal obj = spawnObject(spawnParameters)\r\n\tlocal customDeckParameters = {\r\n\t\tface = faces,\r\n\t\tback = back,\r\n\t\tunique_back = false,\r\n\t\theight = math.ceil(#serials / 10.0),\r\n\t\tnumber = #serials,\r\n\t\tback_is_hidden = true,\r\n\t}\r\n\tobj.setCustomObject(customDeckParameters)\r\nend\r\n\r\nfunction onDeckLoaded(obj, deckname, serials, serialInfo)\r\n\tprint(\"Deck Loaded.\")\r\n\tfor i = 1, #serials, 1 do\r\n\t\tlocal serial = serials[i]\r\n\t\tlocal name = serialInfo[serial][\"Name\"]\r\n\t\tlocal description = serialInfo[serial][\"Description\"]\r\n\t\tlocal card = obj.takeObject({\r\n\t\t\tposition = obj.positionToWorld({0, 0.5, 0}),\r\n\t\t\tsmooth = true,\r\n\t\t\ttop = false\r\n\t\t})\r\n\t\trenameCard(card, name, description, i)\r\n\tend\r\n\tprint(\"Deck Successfully Generated. Once all files are accounted for, please save that object for reuse.\")\r\nend\r\n\r\nfunction renameCard(card, name, description, ix)\r\n\tcard.setName(name)\r\n\tcard.setDescription(description)\r\n\t--card.setPositionSmooth({0, ix * 0.125, 0})\r\n\t--Wait.frames(function() card.setPositionSmooth({0, ix * 0.0125,0}) end, ix)\r\nend",
      "LuaScriptState": "",
      "ContainedObjects": null,
      "PhysicsMaterial": null,
      "Rigidbody": null,
      "JointFixed": null,
      "JointHingeState": null,
      "JointSpring": null,
      "GUID": "",
      "AttachedSnapPoints": null,
      "AttachedVectorLines": null,
      "AttachedDecals": null,
      "States": null,
      "RotationValues": null
    }
  ],
  "Decals": null,
  "TabStates": {},
  "VersionNumber": ""
}